# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_nBZrbXw2bhoP9jYvz1R4CT1Zp2MSS2S
"""

#Create a dual-axis chart comparing the average installs and revenue for free vs. paid apps within the top 3 app categories.
#Apply filters to exclude apps with fewer than 10,000 installs and revenue below $10,000 and android version should be more than 4.0 as well as size should be more than 15M and content rating should be Everyone and app name should not have more than 30 characters including space and special character .
#this graph should work only between 1 PM IST to 2 PM IST apart from that time we should not show this graph in dashboard itself.

import pandas as pd
import plotly.graph_objects as go
from datetime import datetime
import pytz

data = pd.read_csv('C:/Users/sowmi/OneDrive/Documents/AI/Nullclass/Play Store Data.csv', encoding='utf-8', on_bad_lines='skip')

data = data[data['Type'].isin(['Free', 'Paid'])]

data['Price'] = data['Price'].apply(lambda x: str(x).replace('$', '') if isinstance(x, str) else x).astype(float)

data['Installs'] = data['Installs'].str.replace(r'[^\d]', '', regex=True).astype(int)

data['Revenue'] = data['Price'] * data['Installs']
data['Revenue'] = data['Revenue'].apply(lambda x: int(round(x)))

data = data[(data['Installs'] >= 10000) & (data['Revenue'] >= 10000)]

data = data[~data['Size'].isin(['Varies with device'])]
data = data[~data['Size'].str.contains('k')]

data['Size'] = data['Size'].str.replace('M', '').astype(float)

data = data[data['Size'] > 15]

data = data[data['Content Rating'] == 'Everyone']

def extract_version(version_str):
    try:
        version = version_str.split(' ')[0]
        return float(version) if '.' in version else int(version)
    except:
        return None

data['Android Ver'] = data['Android Ver'].apply(extract_version)

data = data[data['Android Ver'] >= 4.0]

data['App'] = data['App'].apply(lambda x: x[:30] if len(x) > 30 else x)

data = data[['Category', 'Type', 'Installs', 'Revenue', 'Size', 'App']]

data = data.drop_duplicates()

rows, columns = data.shape
print(f"No of rows: {rows}")
print(f"No of columns: {columns}")

category_group = data.groupby(['Category', 'Type'])[['Installs', 'Revenue']].mean().reset_index()

top_categories = data['Category'].value_counts().head(3).index

filtered_data = category_group[category_group['Category'].isin(top_categories)]

def within_time_window():
    ist = pytz.timezone('Asia/Kolkata')
    current_time = datetime.now(ist)
    return 13 <= current_time.hour < 14

if within_time_window():

    fig = go.Figure()

    for category in top_categories:
        category_data = filtered_data[filtered_data['Category'] == category]
        fig.add_trace(go.Bar(
            x=category_data['Type'],
            y=category_data['Installs'],
            name=f'{category} - Installs',
            opacity=0.8,
            yaxis='y1'
        ))

    # line chart for average revenue
    for category in top_categories:
        category_data = filtered_data[filtered_data['Category'] == category]
        fig.add_trace(go.Scatter(
            x=category_data['Type'],
            y=category_data['Revenue'],
            mode='lines+markers',
            name=f'{category} - Revenue',
            line=dict(dash='dot'),
            yaxis='y2'
        ))

    fig.update_layout(
        title='Average Installs and Revenue for Free vs Paid Apps',
        xaxis_title='App Type (Free VS Paid)',
        yaxis_title='Average Installs',
        yaxis2=dict(
            title='Average Revenue',
            overlaying='y',
            side='right',
            tickprefix='$',
        ),
        barmode='group',
        template='plotly_dark',
        height=600,
        showlegend=True,
    )

    fig.write_html('dashboard2.html')

    print("Graph generated and saved as 'dashboard2.html'.")

else:
    print("This graph is only available between 1 PM and 2 PM IST.")